# Rules for the OWL-LD profile

# The Semantics of Equality

# eq_ref
# 	foreach
# 		ontology.triple($s, $p, $o)
# 	assert
# 		ontology.triple($s, "owl:sameAs", $s)
# 		ontology.triple($p, "owl:sameAs", $p)
# 		ontology.triple($o, "owl:sameAs", $o)

eq_sym
	foreach
		ontology.triple($x, "owl:sameAs", $y)
	assert
		ontology.triple($y, "owl:sameAs", $x)

eq_trans
	foreach
		ontology.triple($x, "owl:sameAs", $y)
		ontology.triple($y, "owl:sameAs", $z)
	assert
		ontology.triple($x, "owl:sameAs", $z)

eq_rep_s
	foreach
		ontology.triple($s1, "owl:sameAs", $s2)
		ontology.triple($s1, $p, $o)
	assert
		ontology.triple($s2, $p, $o)

eq_rep_p
	foreach
		ontology.triple($p1, "owl:sameAs", $p2)
		ontology.triple($s, $p1, $o)
	assert
		ontology.triple($s, $p2, $o)

eq_rep_o
	foreach
		ontology.triple($o1, "owl:sameAs", $o2)
		ontology.triple($s, $p, $o1)
	assert
		ontology.triple($s, $p, $o2)

eq_diff1
	foreach
		ontology.triple($x, "owl:sameAs", $y)
		ontology.triple($x, "owl:differentFrom", $y)
	assert
		python inconsistency(context, rule)

# eq_diff2 and eq_diff3 are implemented using three different rules (the first is common)

eq_diff2_1 
	foreach
		ontology.triple($x, "rdf:type", "owl:AllDifferent")
		ontology.triple($x, "owl:members", $y)
	assert
		ontology.triple($x, "pyoner:_AllDifferentPart", $y)

eq_diff3_1 
	foreach
		ontology.triple($x, "rdf:type", "owl:AllDifferent")
		ontology.triple($x, "owl:distinctMembers", $y)
	assert
		ontology.triple($x, "pyoner:_AllDifferentPart", $y)

eq_alldiff1
	foreach
		ontology.triple($x, "pyoner:_AllDifferentPart", $y)
		ontology.triple($y, "rdf:rest", $z2)
	assert
		ontology.triple($x, "pyoner:_AllDifferentPart", $z2)

eq_alldiff2
	foreach
		ontology.triple($x, "pyoner:_AllDifferentPart", $y)
		ontology.triple($x, "pyoner:_AllDifferentPart", $z)
		ontology.triple($y, "rdf:first", $e1)
		ontology.triple($z, "rdf:first", $f1)
		ontology.triple($e1, "owl:sameAs", $f1)
		check $e1 != $f1
	assert
		python inconsistency(context, rule)

# The Semantics of Axioms about Properties

# prp_ap ???
#		assert
#			ontology.triple(ap, "rdf:type", "owl:AnnotationProperty") # for each built_in annotation property of OWL 2 RL

prp_dom
	foreach
		ontology.triple($p, "rdfs:domain", $c)
		ontology.triple($x, $p, $y)
	assert
		ontology.triple($x, "rdf:type", $c)

prp_rng
	foreach
		ontology.triple($p, "rdfs:range", $c)
		ontology.triple($x, $p, $y)
	assert
		ontology.triple($y, "rdf:type", $c)

prp_fp
	foreach
		ontology.triple($p, "rdf:type", "owl:FunctionalProperty")
		ontology.triple($x, $p, $y1)
		ontology.triple($x, $p, $y2)
	assert
		ontology.triple($y1, "owl:sameAs", $y2)

prp_ifp
	foreach
		ontology.triple($p, "rdf:type", "owl:InverseFunctionalProperty")
		ontology.triple($x1, $p, $y)
		ontology.triple($x2, $p, $y)
	assert
		ontology.triple($x1, "owl:sameAs", $x2)

prp_irp
	foreach
		ontology.triple($p, "rdf:type", "owl:IrreflexiveProperty")
		ontology.triple($x, $p, $x)
	assert
		python inconsistency(context, rule)

prp_symp
	foreach
		ontology.triple($p, "rdf:type", "owl:SymmetricProperty")
		ontology.triple($x, $p, $y)
	assert
		ontology.triple($y, $p, $x)

prp_asyp
	foreach
		ontology.triple($p, "rdf:type", "owl:AsymmetricProperty")
		ontology.triple($x, $p, $y)
		ontology.triple($y, $p, $x)
	assert
		python inconsistency(context, rule)

prp_trp
	foreach
		ontology.triple($p, "rdf:type", "owl:TransitiveProperty")
		ontology.triple($x, $p, $y)
		ontology.triple($y, $p, $z)
	assert
		ontology.triple($x, $p, $z)

prp_spo1
	foreach
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
		ontology.triple($x, $p1, $y)
	assert
		ontology.triple($x, $p2, $y)

# prp_spo2 uses these rules TODO
#prp_spo2_1
#	foreach
#		ontology.triple($p, "owl:propertyChainAxiom", $x)
#	assert	

prp_eqp1
	foreach
		ontology.triple($p1, "owl:equivalentProperty", $p2)
		ontology.triple($x, $p1, $y)
	assert
		ontology.triple($x, $p2, $y)

prp_eqp2
	foreach
		ontology.triple($p1, "owl:equivalentProperty", $p2)
		ontology.triple($x, $p2, $y)
	assert
		ontology.triple($x, $p1, $y)

prp_pdw
	foreach
		ontology.triple($p1, "owl:propertyDisjointWith", $p2)
		ontology.triple($x, $p1, $y)
		ontology.triple($x, $p2, $y)
	assert
		python inconsistency(context, rule)

# prp_adp uses the 3 following rules

prp_adp_1 
	foreach
		ontology.triple($x, "rdf:type", "owl:AllDisjointProperties")
		ontology.triple($x, "owl:members", $y)
	assert
		ontology.triple($x, "pyoner:_AllDisjointProperties", $y)

prp_adp_2
	foreach
		ontology.triple($x, "pyoner:_AllDisjointProperties", $y)
		ontology.triple($y, "rdf:rest", $z2)
	assert
		ontology.triple($x, "pyoner:_AllDisjointProperties", $z2)

prp_adp_3
	foreach
		ontology.triple($x, "pyoner:_AllDisjointProperties", $y)
		ontology.triple($x, "pyoner:_AllDisjointProperties", $z)
		ontology.triple($y, "rdf:first", $e1)
		ontology.triple($z, "rdf:first", $f1)
		ontology.triple($a, $e1, $b)
		ontology.triple($a, $f1, $b)
		# ontology.triple($e1, "owl:propertyDisjointWith", $f1)
		check $e1 != $f1
	assert
		python inconsistency(context, rule)

prp_inv1
	foreach
		ontology.triple($p1, "owl:inverseOf", $p2)
		ontology.triple($x, $p1, $y)
	assert
		ontology.triple($y, $p2, $x)

prp_inv2
	foreach
		ontology.triple($p1, "owl:inverseOf", $p2)
		ontology.triple($x, $p2, $y)
	assert
		ontology.triple($y, $p1, $x)

# prp_key TODO

prp_npa1
	foreach
		ontology.triple($x, "owl:sourceIndividual", $i1)
		ontology.triple($x, "owl:assertionProperty", $p)
		ontology.triple($x, "owl:targetIndividual", $i2)
		ontology.triple($i1, $p, $i2)
	assert
		python inconsistency(context, rule)

prp_npa2
	foreach
		ontology.triple($x, "owl:sourceIndividual", $i)
		ontology.triple($x, "owl:assertionProperty", $p)
		ontology.triple($x, "owl:targetValue", $lt)
		ontology.triple($i1, $p, $lt)
	assert
		python inconsistency(context, rule)

# The Semantics of Classes
cls_thing
	assert
		ontology.triple("owl:Thing", "rdf:type", "owl:Class")

cls_nothing1
	assert
		ontology.triple("owl:Nothing", "rdf:type", "owl:Class")

cls_nothing2
	foreach
		ontology.triple($x, "rdf:type", "owl:Nothing")
	assert
		python inconsistency(context, rule)

# cls_int1: uses the following rules 
# TODO CHECK

cls_int1_1
	foreach
		ontology.triple($c, "owl:intersectionOf", $x)
		ontology.triple($y, "pyoner:_belongsToAll", $x)
	assert
		ontology.triple($y, "rdf:type", $c)

cls_int1_2
	foreach
		ontology.triple($x, "rdf:first", $e1)
		ontology.triple($x, "rdf:rest", "rdf:nil")
		ontology.triple($y, "rdf:type", $e1)
	assert
		ontology.triple($y, "pyoner:_belongsToAll", $x)

cls_int1_3
	foreach
		ontology.triple($x, "rdf:first", $e1)
		ontology.triple($x, "rdf:rest", $z2)
		ontology.triple($y, "rdf:type", $e1)
		ontology.triple($y, "pyoner:_belongsToAll", $z2)
	assert
		ontology.triple($y, "pyoner:_belongsToAll", $x)

# cls_int2: uses the following rule
# TODO CHECK

cls_int2
	foreach
		ontology.triple($c, "owl:intersectionOf", $x)
		ontology.triple($y, "rdf:type", $c)
	assert
		ontology.triple($y, "pyoner:_belongsToAll", $x)

# cls_uni
# TODO CHECK

cls_uni_1
	foreach
		ontology.triple($c, "owl:unionOf", $x)
		ontology.triple($y, "pyoner:_belongsToAny", $x)
	assert
		ontology.triple($y, "rdf:type", $c)

cls_uni_2
	foreach
		ontology.triple($x, "rdf:first", $e1)
		ontology.triple($x, "rdf:rest", $z2)
		ontology.triple($y, "rdf:type", $e1)
		# ontology.triple($y, "pyoner:_belongsToAny", $z2)
	assert
		ontology.triple($y, "pyoner:_belongsToAny", $x)


cls_com
	foreach
		ontology.triple($c1, "owl:complementOf", $c2)
		ontology.triple($x, "rdf:type", $c1)
		ontology.triple($x, "rdf:type", $c2)
	assert
		python inconsistency(context, rule)

cls_svf1
	foreach
		ontology.triple($x, "owl:someValuesFrom", $y)
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, $p, $v)
		ontology.triple($v, "rdf:type", $y) 
	assert
		ontology.triple($u, "rdf:type", $x)

cls_svf2
	foreach
		ontology.triple($x, "owl:someValuesFrom", "owl:Thing")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, $p, $v) 
	assert
		ontology.triple($u, "rdf:type", $x) 

cls_avf
	foreach
		ontology.triple($x, "owl:allValuesFrom", $y)
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $v)
	assert
		ontology.triple($v, "rdf:type", $y)

cls_hv1
	foreach
		ontology.triple($x, "owl:hasValue", $y)
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, "rdf:type", $x)
	assert
		ontology.triple($u, $p, $y)

cls_hv2
	foreach
		ontology.triple($x, "owl:hasValue", $y)
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, $p, $y)
	assert
		ontology.triple($u, "rdf:type", $x)

cls_maxc1
	foreach
		ontology.triple($x, "owl:maxCardinality", "\"0\"^^xsd:nonNegativeInteger")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $y)
	assert
		python inconsistency(context, rule)

cls_maxc2
	foreach
		ontology.triple($x, "owl:maxCardinality", "\"1\"^^xsd:nonNegativeInteger")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $y1)
		ontology.triple($u, $p, $y2)
	assert
		ontology.triple($y1, "owl:sameAs", $y2)

cls_maxqc1
	foreach
		ontology.triple($x, "owl:maxQualifiedCardinality", "\"0\"^^xsd:nonNegativeInteger")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($x, "owl:onClass", $c)
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $y)
		ontology.triple($y, "rdf:type", $c)
	assert
		python inconsistency(context, rule)

cls_maxqc2
	foreach
		ontology.triple($x, "owl:maxQualifiedCardinality", "\"0\"^^xsd:nonNegativeInteger")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($x, "owl:onClass", "owl:Thing")
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $y)
	assert
		python inconsistency(context, rule)

cls_maxqc3
	foreach
		ontology.triple($x, "owl:maxQualifiedCardinality", "\"1\"^^xsd:nonNegativeInteger")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($x, "owl:onClass", $c)
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $y1)
		ontology.triple($y1, "rdf:type", $c)
		ontology.triple($u, $p, $y2)
		ontology.triple($y2, "rdf:type", $c)
	assert
		ontology.triple($y1, "owl:sameAs", $y2)

cls_maxqc4
	foreach
		ontology.triple($x, "owl:maxQualifiedCardinality", "\"1\"^^xsd:nonNegativeInteger")
		ontology.triple($x, "owl:onProperty", $p)
		ontology.triple($x, "owl:onClass", "owl:Thing")
		ontology.triple($u, "rdf:type", $x)
		ontology.triple($u, $p, $y1)
		ontology.triple($u, $p, $y2)
	assert
		ontology.triple($y1, "owl:sameAs", $y2) 

# cls_oo is implemented with two rules
# TODO: does it need a constraint on != rdf:nil ?

cls_oo_1
	foreach
		ontology.triple($c, "owl:oneOf", $x)
	assert
		ontology.triple($c, "pyoner:_oneOf", $x)

cls_oo_2
	foreach
		ontology.triple($c, "pyoner:_oneOf", $x)
 		ontology.triple($x, "rdf:first", $e1)
 		ontology.triple($x, "rdf:rest", $z2) 
	assert
		ontology.triple($e1, "rdf:type", $c)
 		ontology.triple($c, "pyoner:_unionOf", $z2)

# The Semantics of Class Axioms
cax_sco
	foreach
		ontology.triple($c1, "rdfs:subClassOf", $c2)
		ontology.triple($x, "rdf:type", $c1)
	assert
		ontology.triple($x, "rdf:type", $c2)

cax_eqc1
	foreach
		ontology.triple($c1, "owl:equivalentClass", $c2)
		ontology.triple($x, "rdf:type", $c1)
	assert
		ontology.triple($x, "rdf:type", $c2)

cax_eqc2
	foreach
		ontology.triple($c1, "owl:equivalentClass", $c2)
		ontology.triple($x, "rdf:type", $c2)
	assert
		ontology.triple($x, "rdf:type", $c1)

cax_dw
	foreach
		ontology.triple($c1, "owl:disjointWith", $c2)
		ontology.triple($x, "rdf:type", $c1)
		ontology.triple($x, "rdf:type", $c2)
	assert
		python inconsistency(context, rule)

# cax_adc TODO

# The Semantics of Schema Vocabulary

scm_cls
	foreach
		ontology.triple($c, "rdf:type", "owl:Class")
	assert
		ontology.triple($c, "rdfs:subClassOf", $c)
		ontology.triple($c, "owl:equivalentClass", $c)
		ontology.triple($c, "rdfs:subClassOf", "owl:Thing")
		ontology.triple("owl:Nothing", "rdfs:subClassOf", $c)

scm_sco
	foreach
		ontology.triple($c1, "rdfs:subClassOf", $c2)
		ontology.triple($c2, "rdfs:subClassOf", $c3)
	assert
		ontology.triple($c1, "rdfs:subClassOf", $c3)

scm_eqc1
	foreach
		ontology.triple($c1, "owl:equivalentClass", $c2)
	assert
		ontology.triple($c1, "rdfs:subClassOf", $c2)
		ontology.triple($c2, "rdfs:subClassOf", $c1)

scm_eqc2
	foreach
		ontology.triple($c1, "rdfs:subClassOf", $c2)
		ontology.triple($c2, "rdfs:subClassOf", $c1)
	assert
		ontology.triple($c1, "owl:equivalentClass", $c2)

# scm_op
# 	foreach
# 		ontology.triple($p, "rdf:type", "owl:ObjectProperty")
# 	assert
# 		ontology.triple($p, "rdfs:subPropertyOf", $p)
# 		ontology.triple($p, "owl:equivalentProperty", $p) 

scm_dp
	foreach
		ontology.triple($p, "rdf:type", "owl:DatatypeProperty")
	assert
		ontology.triple($p, "rdfs:subPropertyOf", $p)
		ontology.triple($p, "owl:equivalentProperty", $p)

scm_spo
	foreach
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
		ontology.triple($p2, "rdfs:subPropertyOf", $p3)
	assert
		ontology.triple($p1, "rdfs:subPropertyOf", $p3) 

scm_eqp1
	foreach
		ontology.triple($p1, "owl:equivalentProperty", $p2)
	assert
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
		ontology.triple($p2, "rdfs:subPropertyOf", $p1)

scm_eqp2
	foreach
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
		ontology.triple($p2, "rdfs:subPropertyOf", $p1)
	assert
		ontology.triple($p1, "owl:equivalentProperty", $p2)

scm_dom1
	foreach
		ontology.triple($p, "rdfs:domain", $c1)
		ontology.triple($c1, "rdfs:subClassOf", $c2)
	assert
		ontology.triple($p, "rdfs:domain", $c2)

scm_dom2
	foreach
		ontology.triple($p2, "rdfs:domain", $c)
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
	assert
		ontology.triple($p1, "rdfs:domain", $c)

scm_rng1
	foreach
		ontology.triple($p, "rdfs:range", $c1)
		ontology.triple($c1, "rdfs:subClassOf", $c2)
	assert
		ontology.triple($p, "rdfs:range", $c2)

scm_rng2
	foreach
		ontology.triple($p2, "rdfs:range", $c)
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
	assert
		ontology.triple($p1, "rdfs:range", $c)

scm_hv
	foreach
		ontology.triple($c1, "owl:hasValue", $i)
		ontology.triple($c1, "owl:onProperty", $p1)
		ontology.triple($c2, "owl:hasValue", $i)
		ontology.triple($c2, "owl:onProperty", $p2)
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
	assert
		ontology.triple($c1, "rdfs:subClassOf", $c2)

scm_svf1
	foreach
		ontology.triple($c1, "owl:someValuesFrom", $y1)
		ontology.triple($c1, "owl:onProperty", $p)
		ontology.triple($c2, "owl:someValuesFrom", $y2)
		ontology.triple($c2, "owl:onProperty", $p)
		ontology.triple($y1, "rdfs:subClassOf", $y2)
	assert
		ontology.triple($c1, "rdfs:subClassOf", $c2)

scm_svf2
	foreach
		ontology.triple($c1, "owl:someValuesFrom", $y)
		ontology.triple($c1, "owl:onProperty", $p1)
		ontology.triple($c2, "owl:someValuesFrom", $y)
		ontology.triple($c2, "owl:onProperty", $p2)
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
	assert
		ontology.triple($c1, "rdfs:subClassOf", $c2)

scm_avf1
	foreach
		ontology.triple($c1, "owl:allValuesFrom", $y1)
		ontology.triple($c1, "owl:onProperty", $p)
		ontology.triple($c2, "owl:allValuesFrom", $y2)
		ontology.triple($c2, "owl:onProperty", $p)
		ontology.triple($y1, "rdfs:subClassOf", $y2)
	assert
		ontology.triple($c1, "rdfs:subClassOf", $c2)

scm_avf2
	foreach
		ontology.triple($c1, "owl:allValuesFrom", $y)
		ontology.triple($c1, "owl:onProperty", $p1)
		ontology.triple($c2, "owl:allValuesFrom", $y)
		ontology.triple($c2, "owl:onProperty", $p2)
		ontology.triple($p1, "rdfs:subPropertyOf", $p2)
	assert
		ontology.triple($c2, "rdfs:subClassOf", $c1)

# scm_int is decomposed into two helper rules

scm_int_1
	foreach
		ontology.triple($c, "owl:intersectionOf", $x)
	assert
		ontology.triple($c, "pyoner:_intersectionOf", $x)

scm_int_2
	foreach
		ontology.triple($c, "pyoner:_intersectionOf", $x)
 		ontology.triple($x, "rdf:first", $e1)
 		ontology.triple($x, "rdf:rest", $z2) 
	assert
		ontology.triple($c, "rdfs:subClassOf", $e1)
 		ontology.triple($c, "pyoner:_intersectionOf", $z2)

# scm_int
#   foreach
#     ontology.triple($c, "owl:intersectionOf", $x) 
#     ontology.triple($x, "rdf:first", $e1)
#     ontology.triple($x, "rdf:rest", $z2) 
#     ontology.triple($z2, "rdf:first", $e2)
#     ontology.triple($z2, "rdf:rest", $z3) 
#     ontology.triple($z3, "rdf:first", $e3)
#     ontology.triple($z3, "rdf:rest", "rdf:nil")
#   assert
#     ontology.triple($c, "rdfs:subClassOf", $e1)
#     ontology.triple($c, "rdfs:subClassOf", $e2)
#     ontology.triple($c, "rdfs:subClassOf", $e3)

# scm_uni is decomposed into two helper rules

scm_uni_1
	foreach
		ontology.triple($c, "owl:unionOf", $x)
	assert
		ontology.triple($c, "pyoner:_unionOf", $x)

scm_uni_2
	foreach
		ontology.triple($c, "pyoner:_unionOf", $x)
 		ontology.triple($x, "rdf:first", $e1)
 		ontology.triple($x, "rdf:rest", $z2) 
	assert
		ontology.triple($e1, "rdfs:subClassOf", $c)
 		ontology.triple($c, "pyoner:_unionOf", $z2)

# The Semantics of Datatypes --- TODO

fc_extras
	def inconsistency(context, rule):
		# print context.dump()
		# print context.lookup(rule.foreach_patterns(0)[0])

		s = '{ '

		for f in range(0, len(rule.foreach_facts)):
			s = s + '<' + \
				rule.foreach_patterns(f)[0].as_data(context) + ' ' + \
				rule.foreach_patterns(f)[1].as_data(context) + ' ' + \
				rule.foreach_patterns(f)[2].as_data(context) + \
			'> '
		
		s = s + '}'
		
		raise Exception(s)
